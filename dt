#!/usr/bin/env bash
set -euo pipefail

usage() {
  cat <<'EOF'
dt - Dev task helper (MVP)
Usage:
  dt start -i <issue> [--engine <none|codex|claude>]
  dt pr    -i <issue>

Commands:
  start  : Issueを読み込み -> ブランチ作成 -> コンテキスト生成
  pr     : 変更をコミット/Push -> PR作成（Fixes #<issue> 付き）-> priorityラベル継承
EOF
}

need() { command -v "$1" >/dev/null 2>&1 || { echo "command not found: $1" >&2; exit 1; }; }
slugify() { echo "$*" | tr '[:upper:]' '[:lower:]' | sed -E 's/[^a-z0-9]+/-/g;s/^-+|-+$//g;s/-+/-/g'; }
infer_owner_repo() {
  local url; url="$(git config --get remote.origin.url || true)"
  if [[ "$url" =~ github\.com[:/]+([^/]+)/([^/]+)(\.git)?$ ]]; then
    OWNER="${BASH_REMATCH[1]}"; REPO="${BASH_REMATCH[2]}"; REPO="${REPO%.git}"
  else
    echo "origin が GitHub ではありません" >&2; exit 1
  fi
}

cmd="${1:-help}"; shift || true
case "$cmd" in
  help|-h|--help|'') usage; exit 0 ;;

  start)
    need gh; need git
    ISSUE=""; ENGINE=""
    while [[ $# -gt 0 ]]; do
      case "$1" in
        -i|--issue) ISSUE="$2"; shift 2 ;;
        --engine)   ENGINE="$2"; shift 2 ;;
        *) echo "unknown arg: $1" >&2; exit 1 ;;
      esac
    done
    [[ -z "$ISSUE" ]] && { echo "-i/--issue は必須です" >&2; exit 1; }
    infer_owner_repo

    TITLE="$(gh api "repos/${OWNER}/${REPO}/issues/${ISSUE}" -q .title)"
    BODY="$(gh api "repos/${OWNER}/${REPO}/issues/${ISSUE}" -q .body || true)"
    URL="https://github.com/${OWNER}/${REPO}/issues/${ISSUE}"

    SLUG="$(slugify "$TITLE")"
    BR="issue/${ISSUE}-${SLUG}"
    git fetch origin >/dev/null 2>&1 || true
    if git rev-parse --verify "$BR" >/dev/null 2>&1; then git switch "$BR"; else git switch -c "$BR"; fi

    mkdir -p .devflow
    cat > .devflow/context.md <<MD
# Issue #${ISSUE}: ${TITLE}

URL: ${URL}

## Description
${BODY:-"(no description)"}

## Acceptance criteria
- [ ] Refer to the Issue and GEMINI.md
- [ ] Keep commits small (Conventional Commits)
- [ ] Add tests/docs if needed
MD
    echo "[dt] Branch: $BR"
    echo "[dt] Context: .devflow/context.md"

    ENGINE="${ENGINE:-none}"
    if [[ -x ".devflow/engines/${ENGINE}.sh" ]]; then
      ".devflow/engines/${ENGINE}.sh" ".devflow/context.md" || true
    else
      echo "[dt] エンジン ${ENGINE} は未定義です（.devflow/engines/${ENGINE}.sh を作成してください）"
    fi
    ;;

  pr)
    need gh; need git
    ISSUE=""
    while [[ $# -gt 0 ]]; do
      case "$1" in
        -i|--issue) ISSUE="$2"; shift 2 ;;
        *) echo "unknown arg: $1" >&2; exit 1 ;;
      esac
    done
    [[ -z "$ISSUE" ]] && { echo "-i/--issue は必須です" >&2; exit 1; }

    if [[ -z "$(git status --porcelain)" ]]; then
      echo "[dt] 変更がありません。ファイルを編集してから実行してください" >&2; exit 1
    fi

    infer_owner_repo
    TITLE="$(gh api "repos/${OWNER}/${REPO}/issues/${ISSUE}" -q .title)"
    TYPE="feat"  # MVP: 固定

    git add -A
    git commit -m "${TYPE}: ${TITLE} (Fixes #${ISSUE})"

    CUR="$(git rev-parse --abbrev-ref HEAD)"
    git push -u origin "$CUR"

    # PR作成（ready状態で作成）
    PR_NUMBER="$(gh pr create --title "${TYPE}: ${TITLE}" \
                              --body "Fixes #${ISSUE}\n\nSee .devflow/context.md for details." \
                              --base main --head "$CUR" \
                              --json number -q .number)"
    echo "[dt] PR #${PR_NUMBER} を作成しました。"

    # ---- ここから「priority ラベル継承」 ----
    ISSUE_PRIOS="$(gh api "repos/${OWNER}/${REPO}/issues/${ISSUE}" -q '.labels[].name' | grep '^priority:' || true)"
    if [[ -n "${ISSUE_PRIOS}" ]]; then
      LABEL_CSV="$(echo "${ISSUE_PRIOS}" | paste -sd, -)"
      gh pr edit "${PR_NUMBER}" --add-label "${LABEL_CSV}"
      echo "[dt] PR にラベル付与: ${LABEL_CSV}"
    else
      echo "[dt] Issue に priority: ラベルが無かったため、ラベル継承はスキップしました。"
    fi
    # ---------------------------------------

    echo "[dt] レビューに進んでください。（Project自動追加/Status同期は既存Workflowが処理します）"
    ;;

  *) echo "unknown command: $cmd" >&2; exit 1 ;;
esac
